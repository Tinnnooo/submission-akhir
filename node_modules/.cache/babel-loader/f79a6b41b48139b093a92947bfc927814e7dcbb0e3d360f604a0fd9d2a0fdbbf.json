{"ast":null,"code":"const api = (() => {\n  const BASE_URL = 'https://forum-api.dicoding.dev/v1';\n  async function _fetchWithAuth(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return fetch(url, {\n      ...options,\n      headers: {\n        ...options.headers,\n        Authorization: `Bearer ${getAccessToken()}`\n      }\n    });\n  }\n  function putAccessToken(token) {\n    localStorage.setItem('accessToken', token);\n  }\n  function getAccessToken() {\n    return localStorage.getItem('accessToken');\n  }\n  async function register(_ref) {\n    let {\n      name,\n      email,\n      password\n    } = _ref;\n    const response = await fetch(`${BASE_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n    const {\n      data: {\n        user\n      }\n    } = responseJson;\n    return user;\n  }\n  async function login(_ref2) {\n    let {\n      email,\n      password\n    } = _ref2;\n    const response = await fetch(`${BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n    const {\n      data: {\n        token\n      }\n    } = responseJson;\n    return token;\n  }\n  async function getOwnProfile() {\n    const response = await _fetchWithAuth(`${BASE_URL}/users/me`);\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n    const {\n      data: {\n        user\n      }\n    } = responseJson;\n    return user;\n  }\n  async function getAllUsers() {\n    const response = await fetch(`${BASE_URL}/users`);\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n    const {\n      data: {\n        users\n      }\n    } = responseJson;\n    return users;\n  }\n  async function getAllThreads() {\n    const response = await fetch(`${BASE_URL}/threads`);\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n    const {\n      data: {\n        threads\n      }\n    } = responseJson;\n    return threads;\n  }\n  async function getThreadDetail(id) {\n    const response = await fetch(`${BASE_URL}/threads/${id}`);\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n    const {\n      data: {\n        threadDetail\n      }\n    } = responseJson;\n    return threadDetail;\n  }\n  async function createThread(_ref3) {\n    let {\n      title,\n      body\n    } = _ref3;\n    const response = await _fetchWithAuth(`${BASE_URL}/threads`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        body\n      })\n    });\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n    const {\n      data: {\n        thread\n      }\n    } = responseJson;\n    return thread;\n  }\n  async function createComment(_ref4) {\n    let {\n      content,\n      commentTo = ''\n    } = _ref4;\n    const respone = await _fetchWithAuth(`${BASE_URL}/threads/${commentTo}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        content\n      })\n    });\n  }\n  async function toggleVoteThread(id) {\n    const response = await _fetchWithAuth(`${BASE_URL}/threads/${id}/up-vote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        threadId: id\n      })\n    });\n    const responseJson = await response.json();\n    const {\n      status,\n      message\n    } = responseJson;\n    if (status !== 'success') {\n      throw new Error(message);\n    }\n  }\n  return {\n    putAccessToken,\n    getAccessToken,\n    register,\n    login,\n    getOwnProfile,\n    getAllUsers,\n    getAllThreads,\n    createThread,\n    toggleVoteThread,\n    getThreadDetail\n  };\n})();\nexport default api;","map":{"version":3,"names":["api","BASE_URL","_fetchWithAuth","url","options","fetch","headers","Authorization","getAccessToken","putAccessToken","token","localStorage","setItem","getItem","register","name","email","password","response","method","body","JSON","stringify","responseJson","json","status","message","Error","data","user","login","getOwnProfile","getAllUsers","users","getAllThreads","threads","getThreadDetail","id","threadDetail","createThread","title","thread","createComment","content","commentTo","respone","toggleVoteThread","threadId"],"sources":["C:/Users/Tin/redux/src/utils/api.js"],"sourcesContent":["const api = (() => {\r\n  const BASE_URL = 'https://forum-api.dicoding.dev/v1';\r\n\r\n  async function _fetchWithAuth(url, options = {}) {\r\n    return fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        ...options.headers,\r\n        Authorization: `Bearer ${getAccessToken()}`,\r\n      },\r\n    });\r\n  }\r\n\r\n  function putAccessToken(token) {\r\n    localStorage.setItem('accessToken', token);\r\n  }\r\n\r\n  function getAccessToken() {\r\n    return localStorage.getItem('accessToken');\r\n  }\r\n\r\n  async function register({ name, email, password }) {\r\n    const response = await fetch(`${BASE_URL}/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        name,\r\n        email,\r\n        password,\r\n      }),\r\n    });\r\n\r\n    const responseJson = await response.json();\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n\r\n    const { data: { user } } = responseJson;\r\n\r\n    return user;\r\n  }\r\n\r\n  async function login({ email, password }) {\r\n    const response = await fetch(`${BASE_URL}/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        email,\r\n        password,\r\n      }),\r\n    });\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n\r\n    const { data: { token } } = responseJson;\r\n\r\n    return token;\r\n  }\r\n\r\n  async function getOwnProfile() {\r\n    const response = await _fetchWithAuth(`${BASE_URL}/users/me`);\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n\r\n    const { data: { user } } = responseJson;\r\n\r\n    return user;\r\n  }\r\n\r\n  async function getAllUsers() {\r\n    const response = await fetch(`${BASE_URL}/users`);\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n\r\n    const { data: { users } } = responseJson;\r\n\r\n    return users;\r\n  }\r\n\r\n  async function getAllThreads() {\r\n    const response = await fetch(`${BASE_URL}/threads`);\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n\r\n    const { data: { threads } } = responseJson;\r\n\r\n    return threads;\r\n  }\r\n\r\n  async function getThreadDetail(id) {\r\n    const response = await fetch(`${BASE_URL}/threads/${id}`);\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n\r\n    const { data: { threadDetail } } = responseJson;\r\n\r\n    return threadDetail;\r\n  }\r\n\r\n  async function createThread({ title, body }) {\r\n    const response = await _fetchWithAuth(`${BASE_URL}/threads`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        title,\r\n        body,\r\n      }),\r\n    });\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n\r\n    const { data: { thread } } = responseJson;\r\n\r\n    return thread;\r\n  }\r\n\r\n  async function createComment({ content, commentTo = '' }) {\r\n    const respone = await _fetchWithAuth(`${BASE_URL}/threads/${commentTo}/comments`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        content,\r\n      }),\r\n    });\r\n  }\r\n\r\n  async function toggleVoteThread(id) {\r\n    const response = await _fetchWithAuth(`${BASE_URL}/threads/${id}/up-vote`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        threadId: id,\r\n      }),\r\n    });\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const { status, message } = responseJson;\r\n\r\n    if (status !== 'success') {\r\n      throw new Error(message);\r\n    }\r\n  }\r\n\r\n  return {\r\n    putAccessToken,\r\n    getAccessToken,\r\n    register,\r\n    login,\r\n    getOwnProfile,\r\n    getAllUsers,\r\n    getAllThreads,\r\n    createThread,\r\n    toggleVoteThread,\r\n    getThreadDetail,\r\n  };\r\n})();\r\n\r\nexport default api;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}