{"ast":null,"code":"import { hideLoading, showLoading } from 'react-redux-loading-bar';\nimport api from '../../utils/api';\nimport { receiveUsersActionCreator } from '../users/action';\nimport { receiveThreadsActionCreator } from '../threads/action';\nimport { receiveLeaderBoardsActionCreator } from '../leaderboards/action';\nfunction asyncPopulateUsersAndThreads() {\n  return async dispatch => {\n    dispatch(showLoading());\n    try {\n      const users = await api.getAllUsers();\n      const threads = await api.getAllThreads();\n      dispatch(receiveUsersActionCreator(users));\n      dispatch(receiveThreadsActionCreator(threads));\n    } catch (error) {\n      alert(error.message);\n    }\n    dispatch(hideLoading());\n  };\n}\nfunction asyncPopulateLeaderboards() {\n  return async dispatch => {\n    dispatch(showLoading());\n    try {\n      const leaderboards = await api.getAllLeaderBoards();\n      dispatch(receiveLeaderBoardsActionCreator(leaderboards));\n    } catch (error) {\n      alert(error.message);\n    }\n    dispatch(hideLoading());\n  };\n}\nexport { asyncPopulateUsersAndThreads, asyncPopulateLeaderboards };","map":{"version":3,"names":["hideLoading","showLoading","api","receiveUsersActionCreator","receiveThreadsActionCreator","receiveLeaderBoardsActionCreator","asyncPopulateUsersAndThreads","dispatch","users","getAllUsers","threads","getAllThreads","error","alert","message","asyncPopulateLeaderboards","leaderboards","getAllLeaderBoards"],"sources":["C:/Users/Tin/redux/src/states/shared/action.js"],"sourcesContent":["import { hideLoading, showLoading } from 'react-redux-loading-bar';\r\nimport api from '../../utils/api';\r\nimport { receiveUsersActionCreator } from '../users/action';\r\nimport { receiveThreadsActionCreator } from '../threads/action';\r\nimport { receiveLeaderBoardsActionCreator } from '../leaderboards/action';\r\n\r\nfunction asyncPopulateUsersAndThreads() {\r\n  return async (dispatch) => {\r\n    dispatch(showLoading());\r\n    try {\r\n      const users = await api.getAllUsers();\r\n      const threads = await api.getAllThreads();\r\n\r\n      dispatch(receiveUsersActionCreator(users));\r\n      dispatch(receiveThreadsActionCreator(threads));\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n    dispatch(hideLoading());\r\n  };\r\n}\r\n\r\nfunction asyncPopulateLeaderboards() {\r\n  return async (dispatch) => {\r\n    dispatch(showLoading());\r\n    try {\r\n      const leaderboards = await api.getAllLeaderBoards();\r\n\r\n      dispatch(receiveLeaderBoardsActionCreator(leaderboards));\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n    dispatch(hideLoading());\r\n  };\r\n}\r\n\r\nexport { asyncPopulateUsersAndThreads, asyncPopulateLeaderboards };\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,yBAAyB;AAClE,OAAOC,GAAG,MAAM,iBAAiB;AACjC,SAASC,yBAAyB,QAAQ,iBAAiB;AAC3D,SAASC,2BAA2B,QAAQ,mBAAmB;AAC/D,SAASC,gCAAgC,QAAQ,wBAAwB;AAEzE,SAASC,4BAA4B,GAAG;EACtC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAACN,WAAW,EAAE,CAAC;IACvB,IAAI;MACF,MAAMO,KAAK,GAAG,MAAMN,GAAG,CAACO,WAAW,EAAE;MACrC,MAAMC,OAAO,GAAG,MAAMR,GAAG,CAACS,aAAa,EAAE;MAEzCJ,QAAQ,CAACJ,yBAAyB,CAACK,KAAK,CAAC,CAAC;MAC1CD,QAAQ,CAACH,2BAA2B,CAACM,OAAO,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;IACtB;IACAP,QAAQ,CAACP,WAAW,EAAE,CAAC;EACzB,CAAC;AACH;AAEA,SAASe,yBAAyB,GAAG;EACnC,OAAO,MAAOR,QAAQ,IAAK;IACzBA,QAAQ,CAACN,WAAW,EAAE,CAAC;IACvB,IAAI;MACF,MAAMe,YAAY,GAAG,MAAMd,GAAG,CAACe,kBAAkB,EAAE;MAEnDV,QAAQ,CAACF,gCAAgC,CAACW,YAAY,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,KAAK,CAACD,KAAK,CAACE,OAAO,CAAC;IACtB;IACAP,QAAQ,CAACP,WAAW,EAAE,CAAC;EACzB,CAAC;AACH;AAEA,SAASM,4BAA4B,EAAES,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}